[{"model": "cms.post", "pk": 1, "fields": {"title": "「日々の雑記」公開しました", "body": "[TOC]\r\n# こんにちは。\r\n初めまして、 Ken と申します。\r\nこのページは、 <mark>World of **F**</mark>  サイト管理人、または作家の [HaLu](/about/HaLu) さんより日々の生活、子育て、IT関連などなど雑多に掲載する予定です。\r\nレジンの作品作りに関する裏話もあるかもしれませんよ。\r\n\r\n本サイトは、 プログラミング言語 Python のフレームワーク Django を用いて構築しました。\r\n構築上の話や子育ての話、仕事の話など、雑多に記載する予定です。\r\n簡単に自己紹介から。\r\n\r\n# プロフィール\r\n名前は KEN といいます。\r\n一児の父です。父親なりの子育て奮闘中。\r\n社内IT関連の運用保守、企画の仕事をしています。\r\n平成生まれの30代です。\r\n\r\n## このサイトについて\r\nこのサイトは、 HaLu の作品を紹介したいなと思って始めました。\r\n蓄光の様子やレジンの製作の過程などなど初めて見たときに、感動したのを覚えています。\r\n\r\n勉強のためと思い、VPS を契約してLINUX をインストール、Python はもともと興味があったのでPython のメジャーなWeb フレームワークDjango にてサイトを構築することに。\r\nWebサーバーはNginx にて構築しました。\r\n完全に初心者からスタートだったため、初心者目線から構築の話を書ければと。\r\n\r\n## 出身\r\n北関東の田舎です\r\n\r\n## 趣味\r\n軟式テニスを長いことやっていました。\r\n最近また再燃して月一でやっていますが、やはり楽しい。。\r\nやっている人はいるかな。\r\n\r\n## 今後\r\nこのサイトでは日常やIT技術関連の情報も発信したいと思います！\r\nPython は機械学習や統計などの分野でよく使われていますよね。もともと数値解析をしていたのでPython を利用して分析してみたいと思っていました。\r\n最近はコロナウィルスの話題もあります、政府から毎日数値データが出ていますので統計分析などもやってみました。近日公開します。", "created_at": "2020-12-21", "updated_at": "2021-11-03", "category": 3, "thumnail": "post/Mount-Cook_1920x1080.jpg", "is_publish": true, "writer": 2, "abstract": "日々の雑記を公開しました！！", "tag": [8]}}, {"model": "cms.post", "pk": 2, "fields": {"title": "パソコン修理に出した話", "body": "[TOC]\r\n\r\n# ある日\r\n某海外製のメーカのPC が壊れた。のだけど、事前にPowerShell でメーカに連絡するのに必要なシリアル番号をPowerShell でゲットしておいたから、スムーズに修理手配までできた。\r\n\r\n!!! warning\r\n\t筆者はこの方法で取得したシリアル番号をメーカに伝えて、修理を依頼することができました。ただしメーカによってはこの場合でないこともありますし、自作のPCなどはこの限りでないので参考程度に見てください。\r\n\r\n## コマンド\r\nPC 導入時などに、以下のコマンドを実行しておいて、シリアル番号を CSV に保存しておきました。\r\n\r\n```powershell\r\nGet-WmiObject Win32_ComputerSystemProduct | Select-Object PSComputerName,Vender, Caption,IdentifyingNumber |Export-Csv -Path .\\serial.csv -NoTypeInformation -Encoding UTF8\r\n```\r\n実行すると、 <mark>serial.csv</mark> という csv が出力されると思います。\r\ncsv には以下の情報が記載されているはずです。\r\n\r\n```csv\r\n\"PSComputerName\",\"Vendor\",\"Caption\",\"IdentifyingNumber\"\r\n\"<HOST名>\",\"<メーカ名>\",\"コンピューター システム製品\",\"<シリアル番号>\"\r\n```\r\n\r\nこちらの **IdentifyingNumber** が知りたいPCのシリアル番号に対応しています。修理したときにメーカの修理窓口に伝えればOKでした。（私の場合）\r\n\r\n## コマンドの解説\r\nPowerShell は Windows に標準で入っているはずです。\r\nスタートメニューを *PowerShell* などと入力して検索すると、ISE かコマンド形式の CUI の画面が出てくるはずです。\r\n最近はクロスプラットフォームで Linux などでも実行できる環境が提供されているけど、 ``Get-WmiObject`` コマンドはサポートされていないとのことです。\r\n\r\nどちらでもよいので、実行して表示された画面で上記コマンドを実行します。\r\nコマンドの詳細は以下です。\r\n\r\n*[WMI]: Windows Management Instrumentation\r\n\r\n<dl>\r\n<dt>Get-WmiObject</dt>\r\n<dd> WMI は、Microsoftが開発したWindowsシステムの状態を示す情報を取得できるコマンド。</dd>\r\n<dt>Win32_ComputerSystemProduct</dt>\r\n<dd>シリアル番号を含んだ情報</dd>\r\n<dt>Select-Object</dt>\r\n<dd>ほしい列の情報だけ指定します</dd>\r\n<dt>Export-Csv</dt>\r\n<dd>情報をCSVに保存（エクスポート）します。*-NoTypeInformation * で余計な最初の一行を省きますので必要です。</dd>\r\n</dl>\r\n\r\n## ただし\r\nコマンドはWindows 限定ですし、PCが壊れてOSが起動できない時などはもちろん実行できないのですけどね。あと、PC筐体にシリアル番号くらい書いてあるはずですのでPC裏返せばシリアル番号くらい確認できます。", "created_at": "2021-01-05", "updated_at": "2022-01-04", "category": 4, "thumnail": "post/computer_note_bad.png", "is_publish": true, "writer": 3, "abstract": "PowerShell 使えてよかった。どうでもいいことで達成感を得てニヤつく。", "tag": [1, 9]}}, {"model": "cms.post", "pk": 3, "fields": {"title": "社会人のためのデータサイエンス入門を受講しました", "body": "[TOC]\r\n# 見出し1\r\n本文\r\n## 見出し2\r\n\r\n**強調**\r\n*斜字*", "created_at": "2021-02-20", "updated_at": "2021-02-20", "category": 7, "thumnail": "", "is_publish": false, "writer": 2, "abstract": "総務省統計局が公開している「社会人のためのデータサイエンス入門」を受講しました。", "tag": [6, 7]}}, {"model": "cms.post", "pk": 4, "fields": {"title": "HaLu", "body": "[TOC]\r\n# レジンの着色方法のご紹介\r\nこんにちは、HaLuです。\r\n今日は私がよく行っているレジンの着色方法のひとつを見せちゃいます！\r\n色を作った後は長い時間置いておかないと気泡が抜けませんが、気泡を抜く時間を短縮する裏技も紹介します♪\r\nレジンを初めて間もない方や、着色方法をお調べの方…etc、是非最後まで見て行って下さいね。\r\n\r\n## 使うのはコチラ「清原レジン」と「」\r\n「粉」のものと比べて簡単です。\r\n\r\n## 混ぜ方や色の作り方…この4色で自由自在！ \r\n\r\n## 意外な所で強い味方！アイススプーン\r\n\r\n## 混ぜたら気泡ができるので、1日以上放置する\r\nカップを上から落とす、でも抜けますが私は自信が無いので寝る前に作って翌日夜に利用しています。\r\n気泡はばっちり抜けてますよ♪\r\n\r\n## ランプを当てると気泡ができる…⁉解決方法のご紹介\r\n※一例です\r\n\r\n次回は、私がよく使っている蓄光粉とレジンの混合をご紹介します。\r\n入れすぎると硬化不良の元、少なすぎると思ったように光らない…と、粉の方が扱いが難しいです。\r\n\r\nそれではまた見に来て下さいね♪\r\n\r\n**強調**\r\n*斜字*", "created_at": "2021-05-03", "updated_at": "2021-05-03", "category": 8, "thumnail": "", "is_publish": false, "writer": 3, "abstract": "UVレジンの着色方法のご紹介。すぐ使いたい「気泡を抜く」裏技も！", "tag": []}}, {"model": "cms.post", "pk": 5, "fields": {"title": "Rust勉強中！①", "body": "[TOC]\r\n# Rustとは\r\n高速、かつ信頼性のあるサービスを構築できる比較的新しいプログラミング言語です。\r\nC言語やC++ に代わるシステムプログラミング言語として誕生したそうです。\r\n\r\n[Rust ホームページ](https://doc.rust-jp.rs/)\r\n\r\n## Rust の特徴\r\nRust の特徴としては、以下の3つだそうです。\r\n\r\n- 安全性\r\n- 速度\r\n- 並列性\r\n\r\n勉強中のため深くは理解できていませんが、他の言語とは違うメモリ管理方式を採用しており、それがC言語や C++ のようなプログラム側がメモリ管理の考慮をせずとも、高速でメモリリークなどをすることがなくプログラミングすることができます。\r\n\r\n**所有権** という概念がこの中心の機能であるため、この理解が必要そうです。\r\nまた、書き方としても、独特で厳格なルールがありそうなので勉強しつつ習得していきたいと思います！\r\n\r\n\r\n## 勉強環境構築\r\n自宅のWindows ノートパソコンにRust の環境をインストールして ``Hello world`` までやってみました。\r\n\r\n動作環境としては\r\n\r\n- Windows 10 Home x64 (21H2)\r\n- メモリ8GB\r\n- CPU Intel CORE i7\r\n\r\nです。\r\n\r\n## インストール(Windows版)\r\n### Rust のプログラムをインストール\r\n[公式サイト](https://www.rust-lang.org/ja/tools/install) から Windows 版の x64 の方をダウンロードしました。\r\n\r\n![Rustインストール](/uploads/markdownx/7b1a0119-64ef-4fdf-b48c-8ed55c93682e.png)\r\n\r\nRust のみのインストールでは、Windows 環境にてコンパイルができません。\r\n\r\n### Microsoft C++ Build Tools のインストール\r\n\r\n[こちら](https://visualstudio.microsoft.com/ja/visual-cpp-build-tools/) からBuild Tools をダウンロードして、実行しました。\r\n\r\n私の環境では、 **Visual Studio 2019 ツール** >> **Build Tools for Visual Studio** を選択してインストールしました。\r\n\r\n# 実行\r\nインストールが終了したら、 *Cargo* を使って実行することができます。\r\n## プロジェクトの作成\r\nコマンドラインから、自分の任意の作業ディレクトリに移動してプロジェクトを作成します\r\n\r\n``cargo new <プロジェクト名>`` を実行します。 (<プロジェクト名>となっている部分は、任意の文字で構いません。最初は hello-rust としました。)\r\n\r\nを実行します。\r\n**<プロジェクト名>** のディレクトリができるはずです。\r\nあらかじめ、コマンドラインに ``Hello world`` を出力するプログラムが記載されているので、\r\n\r\n``cargo run``\r\n\r\nで実行し、結果を得ることができました。\r\n次以降は、実際にプログラムを作成していきます。", "created_at": "2021-06-09", "updated_at": "2021-08-12", "category": 9, "thumnail": "post/サムネ.png", "is_publish": true, "writer": 2, "abstract": "次世代のプログラミング言語 \"Rust\" を勉強してみました。", "tag": [1, 10]}}, {"model": "cms.post", "pk": 6, "fields": {"title": "新型コロナウィルス感染状況をPythonで出力する", "body": "[TOC]\r\nコロナ禍の生活となりもう久しいですね。\r\n一刻も早く収束することを願うばかりです。\r\n今回は、Pythonを使って厚生労働省で公開しているオープンデータを用いて日本の新型コロナウィルスの分析、可視化します。\r\n\r\n# 目的\r\nPython を利用して、厚生労働省が公表している統計情報をもとにグラフ出力し、分析します。\r\n今回は、PCR検査のデータから日ごとの結果を表示させます。\r\n工夫した点やポイント等を解説します。コードは *.py 形式で保存して実行可能です。\r\n※動作を保証するものではありませんのでご了承ください。\r\n\r\n## オープンデータについて\r\n厚生労働省は、下記のURL でコロナウィルス関連のデータを公開しています。\r\nhttps://www.mhlw.go.jp/stf/covid-19/open-data.html\r\n\r\n今回は上記URLにあるデータを使わせていただいています。\r\n\r\n- PCR検査実施人数\r\n- 陽性者数\r\n- PCR検査の実施件数\r\n\r\nのデータを使いました。\r\n\r\n## 実行環境\r\n筆者のPC環境は以下となります\r\n\r\n- Windows 10 Home (64bit)\r\n- Python 3.9.5\r\n\r\n※政府のサイトを直接参照するので、ネットワーク回線は必須です。\r\n\r\n## Pythonライブラリ\r\n*matplotlib* と *pandas* を利用します。\r\nそれぞれインストールします。\r\n\r\n``pip install matplotlib`` ``pip install pandas``  でインストールします。\r\n\r\n### ``pip freeze`` の抜粋\r\n\r\nmatplotlib==3.3.3\r\npandas==1.2.0\r\n\r\n## コード\r\n実際のコードは以下となります。貼り付けて、 `<任意の名前>.py` で保存し、\r\nコマンドラインから ``python <任意の名前>.py`` を実行するとグラフ画面が表示されるはずです。\r\n\r\n```Python\r\nfrom datetime import date\r\n\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.rcParams['font.family'] = 'sans-serif'\r\nplt.rcParams['font.sans-serif'] = ['Hiragino Maru Gothic Pro', 'Yu Gothic', 'Meirio', 'Takao', 'IPAexGothic', 'IPAPGothic', 'VL PGothic', 'Noto Sans CJK JP']\r\n\r\npcr_case_daily = \"https://www.mhlw.go.jp/content/pcr_case_daily.csv\"\r\npcr_positive_deily = \"https://www.mhlw.go.jp/content/pcr_positive_daily.csv\"\r\npcr_tested_daily = \"https://www.mhlw.go.jp/content/pcr_tested_daily.csv\"\r\n\r\n# URL を入力してデータの加工\r\ndef make_dataframe(url, needs_sum=False, diff_column_name=None):\r\n\r\n    df = pd.read_csv(url)\r\n    if needs_sum:\r\n        df[\"合計\"] = df.sum(axis=1)\r\n    if diff_column_name:\r\n        df[\"差分_{0}\".format(diff_column_name)] = df[diff_column_name].diff()\r\n    return df\r\n\r\n# 移動平均\r\ndef rolling(df, key):\r\n\r\n    df[\"{0}_移動平均\".format(key)] = df[key].rolling(window=5).mean()\r\n    return df\r\n\r\n# 外部接続\r\ndef merge(left,right, key):\r\n    df_sum = pd.merge(left, right, on=key, how='outer') \r\n    return df_sum\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    df1 = make_dataframe(pcr_case_daily,True)\r\n    df2 = make_dataframe(pcr_positive_deily,False, \"PCR 検査陽性者数(単日)\")\r\n    df3 = make_dataframe(pcr_tested_daily,False)\r\n\r\n    df_sum = merge(df1, df2, '日付')\r\n    df_sum = merge(df_sum, df3, '日付')\r\n\r\n    df_sum['日付'] = pd.to_datetime(df_sum['日付'])\r\n    df_sum.sort_values('日付', inplace=True)\r\n    df_sum = df_sum.reset_index()\r\n    df_sum = rolling(df_sum,\"PCR 検査陽性者数(単日)\")\r\n    df_sum.plot(x=\"日付\",y=\"合計\")\r\n\r\n    df_sum[\"割合\"] = df_sum[\"PCR 検査陽性者数(単日)\"] / df_sum[\"合計\"]\r\n    df_sum.plot(x=\"日付\",y=\"割合\")\r\n    ax1 = df_sum.plot(x=\"日付\",y=\"PCR 検査陽性者数(単日)\")\r\n    df_sum.plot(x=\"日付\",y=\"PCR 検査陽性者数(単日)_移動平均\", ax = ax1)\r\n    df_sum.plot(x=\"日付\",y=\"PCR 検査実施件数(単日)\")\r\n    out_csv_filename = \"pcr_{0}.csv\".format(date.today())\r\n    df_sum.to_csv(out_csv_filename)\r\n\r\n    plt.show()\r\n\r\n```\r\n\r\n## 解説\r\nこのコードのポイントは、以下です。\r\n\r\n- matplotlib のグラフ出力で日本語に対応している\r\n- 日付の文字列データを文字列型に加工し、扱いやすくしている\r\n- 移動平均を用いてデータを見やすくしている\r\n- 加工後のデータを csv 形式で保存している\r\n\r\nまずは、\r\n\r\n```Python\r\nfrom datetime import date\r\n\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.rcParams['font.family'] = 'sans-serif'\r\nplt.rcParams['font.sans-serif'] = ['Hiragino Maru Gothic Pro', 'Yu Gothic', 'Meirio', 'Takao', 'IPAexGothic', 'IPAPGothic', 'VL PGothic', 'Noto Sans CJK JP']\r\n```\r\n\r\nの部分で、フォントを指定してすることで日本語の部分文字化けさせないようにしています。\r\nこれを実行しないと、グラフのタイトルなどが正常に表示されず、いわゆる「豆腐」文字列となると思います。\r\n\r\n以下はURL からpandas の Dataframe を出力する自作の関数です。\r\n\r\n```Python\r\n# URL を入力してデータの加工\r\ndef make_dataframe(url, needs_sum=False, diff_column_name=None):\r\n\r\n    df = pd.read_csv(url)\r\n    if needs_sum:\r\n        df[\"合計\"] = df.sum(axis=1)\r\n    if diff_column_name:\r\n        df[\"差分_{0}\".format(diff_column_name)] = df[diff_column_name].diff()\r\n    return df\r\n```\r\n\r\nPCR検査のデータは、どうやら各検査所のカテゴリごとに分けて統計値をとっているようなので、\r\n各検査所のその日の検査の和 = その日の全検査数\r\n\r\nとして合計値の列を作成するようにしています。\r\n``pandas.Dataframe.diff`` 関数を使うと指定した列において、その値からひとつ前の行の値を引き算した値を出力します。\r\n\r\n合計値が必要なのは、検査数のデータだけなので、\r\n\r\n次に **merge** 関数で、日付のキーでがっちゃんこします。\r\n\r\n```Python\r\n    df_sum['日付'] = pd.to_datetime(df_sum['日付'])\r\n    df_sum.sort_values('日付', inplace=True)\r\n    df_sum = df_sum.reset_index()\r\n```\r\n\r\nこの部分でいろいろやっていますが日付のキーを python の datetime 型に変換しています。\r\nこうすると、グラフ化するときにいい感じになります。\r\nインデックスを振り直しもしています。\r\n\r\n## グラフ\r\nこんな感じのグラフが得られると思います。\r\n\r\n![グラフ1](/uploads/markdownx/f715303c-e58d-409b-a341-edeb64ca5208.gif)\r\n\r\n![グラフ2](/uploads/markdownx/a548769d-9a8a-4d91-8946-2fb321392421.gif)\r\n\r\n## 最後に\r\n今回は、単純な日付のデータをプロットしました。\r\nブログでPython プログラミング技術系の記事を書くのは初めてです。\r\n是非ご指摘があればコメント等ください。", "created_at": "2021-06-23", "updated_at": "2021-08-23", "category": 10, "thumnail": "post/document_data_bunseki.png", "is_publish": true, "writer": 2, "abstract": "Python を使って日本における新型コロナウィルス (COVID‑19)の感染状況を出力してみました。", "tag": [1, 6, 11, 12]}}, {"model": "cms.post", "pk": 7, "fields": {"title": "コロナワクチン接種(1回目)", "body": "[TOC]\r\n7/21 職域接種にて、新型コロナウィルスのワクチン接種をしましたので単なる体に起こった変化などを記録するために書きます。\r\n私は午前中(10:30~)の枠でした。\r\n\r\n\r\n# 当日朝 09:15 ~ \r\n問診表や接種券などを準備して、会場までは電車移動しました。\r\n初めて行った場所であるということと、どうやって書類を渡すのかなど割とドキドキしていました。\r\n\r\n## 当日 10:15 会場到着\r\nドキドキしている様子は隠して、会社名を受け付けの方にお伝えしました。\r\n名前を確認されて中に案内されました。予約されている、と少しホッとしました。\r\n会場はコチラと矢印がところどころあって、たぶんキョロキョロしながら接種会場まで足を運んだのではないかと思います。\r\n\r\n\r\n## 当日 10:21 接種会場到着\r\n受け付けは机が並列に3つくらい並んでいる状況で、距離が保たれていました。\r\n会場はシーンとしていましたが、中には結構な人の数がいた気配はありました。\r\nそこでの受付は、問診票を渡して、しばらくした後「この部分同意するでいいですか？」ということを聞かれたと思います。\r\n\r\n「接種に同意する」という肝心な部分のチェックを入れていなかったようです。\r\n意を決してチェックを入れました。\r\n\r\n\r\n## 当日 10:23 接種開始\r\nその後は、まるで工場のラインのようにスムーズでした。\r\n最初に医師による検診。\r\n「熱とかはないですね～」\r\n「はい」\r\n「今まで薬のアレルギー反応とかはなかったですか～」\r\n「はい」\r\n\r\n以上。20秒くらい\r\n\r\n## 当日 10:24 \r\n看護師さんの場所へ案内。\r\nこの時「10時半の予約だったけど早く来すぎてしまったなあ・・大丈夫だったのかな」\r\nなどと腕をまくりながら考えていたようです。\r\n\r\n看護師さんが何か話しかけてくれたと思うのですが、空返事をしてしまいました。\r\n\r\n**・・・ブスッ**\r\n\r\n（心の準備がないまま針が刺されました！）\r\n針を刺した時、普通の注射より少し強めの痛みがありましたが、本当に一瞬という感じです。\r\n看護師さんは打った感じ慣れている感じで、何人も打ったのだろうなと思いました。\r\n\r\n## 当日 10:30 接種完了\r\n15分ほど様子を見るよう言われました。\r\n\r\n先に接種をした妻とLINEしていました。\r\n私「もう終わった」\r\n妻「だろ（笑）」\r\n妻「今から15分待ち？」\r\n私「経過観察中」\r\n・・・\r\n\r\n15分後特に何も変化なく、退出。\r\n腕は刺された時の痛みが残っていました。\r\nこの時は全然特に何も変化なく、後に副反応が出たことは考える由もなく。\r\n\r\n## 当日 12:30\r\n帰りにOSワンを買いました。\r\n接種後、車を使う用事がありました。\r\nカーブを曲がるときは若干腕の重い感じ。\r\n違和感があるかな、程度で普通に運転できました。\r\n\r\n仕事は休みを取っていましたから、子供も保育園から迎えに行ったり、その後抱っこしたり散歩したりできました。\r\n\r\n## 当日 18:00\r\n夕方くらいから、「あれ、風邪を引いたときのだるさがあるなあ」と感じました。\r\n\r\n就寝後も消えませんでしたね。\r\n腕は徐々に痛みが強くなってきて、このころは青あざができたときの感じです。\r\n患部を押したり、腕を上げたりすると痛い。\r\n\r\n子供にだっこをせがまれた場合、まあ痛いけどやったるかという感じでした。\r\n食欲はありました。風邪のだるさだけがある感じでした。熱はなし。\r\n\r\n# 一日後\r\n## 一日後 昼\r\nだるさ、腕の痛みが強くなった感じがしました。\r\n後頭部の頭痛が出てきました。\r\nこれが今までとは異質な感じで、はっきりとした、「ズキズキ」というなんというかリズミカルな後頭部の頭痛でした。\r\n\r\n子供にだっこをせがまれた場合、今はやめてーけど左腕で抱っこしちゃうという感じでした。\r\n\r\n## 一日後 夜\r\nリズミカルな頭痛は続いて体のだるさも強いので、機嫌が悪くなりました。\r\n\r\n妻と子に早く寝るわと伝えて、横になりました。\r\n抱っこは、お風呂は・・・\r\n今だから言うけど、機嫌悪くしてゴメンネ・・！\r\nOSワン飲んで寝ました。\r\n\r\n# 二日後\r\n## 二日後 昼\r\n[ 一日後 夜](# 一日後 夜) に比べると寝た後は落ち着いたかなと思います。\r\n腕は青あざの痛さで、頭痛はたまにはっきりと、だるさは少しあり。熱はなし\r\n\r\n子供の抱っこは左腕でやりました。\r\n\r\n## 二日後 夜\r\n腕は青あざの痛さで、頭痛は夜の方が強く、だるさは少しあり。熱はなし\r\n\r\n子供の抱っこは左腕でやりました。\r\nお風呂は家族で入りました。\r\n\r\n# 三日後\r\n## 三日後 朝\r\n目覚めよく目が覚めたことを覚えています。\r\n不思議なことに頭痛はすっきりした感じがあり、腕の痛みもよくなりました。\r\n\r\n結局なんだこのくらいかと、思いました。\r\n子供の抱っこは右腕でもでやりました。\r\n\r\nしかし、その後、です\r\n\r\n# その後(接種後約10日後)\r\n左肩の鎖骨に違和感があり、触ってみるとしこりのようなものがありました。\r\nワクチン後だいぶたっていたのでワクチンのせいとはあまり考えず、いやな予感がしてとりあえずググったところ\r\n<mark>リンパ腫</mark> などという文字が・・・\r\n\r\n1週間後病院を予約し、みてもらったところ、\r\n\r\nワクチンの副作用でよくリンパの部分が腫れる、ということがよくあるらしく、それとのこと。\r\n葛根湯をもらい、飲み続けましたが、徐々によくなりました。\r\n\r\nただ、二週間後に二回目が控えているよ～大丈夫かな", "created_at": "2021-07-21", "updated_at": "2021-09-12", "category": 11, "thumnail": "post/medical_vaccine_covid19_HMFyITz.png", "is_publish": true, "writer": 2, "abstract": "2021年07月21日 新型コロナウィルスのワクチン（モデルナ製）を接種してきました。\r\n1回目の記録です！", "tag": [14, 15]}}, {"model": "cms.post", "pk": 8, "fields": {"title": "サイト構築の裏話（①導入編）", "body": "[TOC]\r\n# どうやってサイトを公開するか…？\r\n本サイト [Fの世界](/) は2018年に公開しました。当時は作品の紹介やブログなど、なんとなくやりたいことが決まった状態でした。ただ世の中にサイトの公開するサービスは多数あるものです。さてどれを選択したらよいものか。\r\n\r\nサイト公開前は、\r\n色々とどれが好ましいか調べたのを覚えています。選択肢は\r\n\r\n- WordPress\r\n- 一般的なブログサイト([はてなブログ](https://hatenablog.com/){:target=\"_blank\"} , [ライブドアブログ](https://blog.livedoor.com/){:target=\"_blank\"} , …などなど)\r\n- 自分でコーディングしてみる (←結局これにしてみました！)\r\n\r\nこんな感じ。最近は、お洒落なWebサイトを簡単に作ることもできますよね（[Wix](https://ja.wix.com/){target=\"_blank\"} とか・・・）。\r\n\r\n## WordPress\r\nワードプレスは、基本的にはプログラミングをすることなく高品質なサイトを作ることができます。\r\nインストールして、プラグインを入れれば、初心者でも構築ができて、メンテナンスも簡単。\r\n\r\n最初はこれがいいかなと思いました。早くサイトも立てたかったので。\r\nただ、簡単な分細かい調整はできないし、ブログには向いているけど作品の紹介などには向いていなさそうと思いました。\r\n\r\n\r\n後日ですが、妻が自分のサイトをWordPress で立てました！　[妻のブログサイト wordpress版](https://world-of-f.com/wp){:target=\"_blank\"}\r\n\r\nこちらも見てくださいね～！\r\n\r\n## ブログサービスを使う\r\nはてなブログなどなど、他のサービスもあることは知っていて検討はましたが、やるならやはり勉強がてら自分でサイトデザインして自由にやっていくのがいいかなと思いました。\r\n\r\n## 自分でコーディングする\r\nでは、一からやってみようと思い、サイトを作ってみることにしました。\r\nWeb サイト公開方法はいろいろと方法はありそうですが、後述する **VPS** が、自由にスペックもサイジング可能だし、スモールスタートができそうでメリットがあると感じ、こちらにしました。自分でコーディングする方法で他には\r\n\r\n- 共用サーバを契約する\r\n- 専用サーバを契約する\r\n- 自宅のサーバを公開する\r\n\r\nなどがあると思います。\r\n\r\n# なぜVPS\r\nVPS は ( **V**rtual **P**rivate **S**erver) の略で、物理的なCPU メモリ、保存領域を仮想的に自分独自に割り当てることで、自分独自にOS をインストールしてカスタマイズが可能となります。\r\n\r\n自分に割り当てられる領域は、契約時に決められるため最初は最小限の容量を契約して、必要に応じて増やすことができるのでメリットがあると感じました。\r\n\r\n結局本サイトは、VPS に自分が経験のある CentOS (今は [CentOS Stream](https://www.centos.org/centos-stream/){target=\"_blank\"} に変更) をインストールして、Webサーバを Nginx 、Webフレームワークはで Django を選択しました。\r\n\r\n以上導入までの話しでした。\r\n\r\n次回以降は、 Nginx の設定、Django のコーディングなどについて順次載せていきたいと思います！", "created_at": "2021-08-10", "updated_at": "2021-10-30", "category": 12, "thumnail": "post/job_programmer.png", "is_publish": true, "writer": 2, "abstract": "本サイト構築の裏話。", "tag": [1, 2, 11, 13]}}, {"model": "cms.post", "pk": 9, "fields": {"title": "コロナワクチン接種（2回目）", "body": "[TOC]\r\n# ドキドキの二回目接種\r\n[一回目の接種](/post/7) からおよそ一ヶ月後、モデルナ二回目を接種しました。\r\n\r\n## 会場\r\n職域接種でしたので同じ会場です。\r\n\r\n## 接種まで\r\n[一回目の接種](/post/7) とほぼかわらなかったです。\r\n 副反応が気になりました。\r\n\r\n# 一日目\r\n一日目は、その後会社に帰社して普通に仕事していました。\r\n熱もなく、腕が痛いくらいかなと。\r\n\r\n# 二日目\r\n## 二日目の朝\r\n起きたら、<mark>38.5</mark> 度の熱でした。\r\n![385](/uploads/markdownx/6c53db2c-9c95-4293-b381-169a554f12e1.jpg)\r\n\r\n当然仕事は行けず、ダウン。\r\nもともと休みを予定していたものの、実際熱が出るとへこみました。\r\n\r\n風邪引いたときと同じだるさで、かなり辛かった。。\r\n\r\nですが免疫ができていればOKかな。\r\n\r\n以上です〜", "created_at": "2021-08-23", "updated_at": "2021-10-10", "category": 11, "thumnail": "post/medical_vaccine_covid19_IyQ9LIY.png", "is_publish": true, "writer": 2, "abstract": "新型コロナウィルスワクチン2回目を接種。副反応の記録", "tag": [14, 15]}}, {"model": "cms.post", "pk": 10, "fields": {"title": "四国旅行記①", "body": "[TOC]\r\n# 見出し1\r\n本文\r\n## 見出し2\r\n\r\n**強調**\r\n*斜字*", "created_at": "2021-09-26", "updated_at": "2021-09-26", "category": 5, "thumnail": "", "is_publish": false, "writer": 2, "abstract": "レオマワールドへ行ってきた", "tag": [1, 16, 17]}}, {"model": "cms.post", "pk": 11, "fields": {"title": "Chromebook 買ってみた", "body": "[TOC]\r\n# 買っちゃいました\r\nChromebook 。\r\n\r\n<iframe style=\"width:120px;height:240px;\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&t=kenichi0e-22&m=amazon&o=9&p=8&l=as1&IS2=1&detail=1&asins=B08GS4SPTW&linkId=dc2a98761c8e198c743dab5d29098e68&bc1=000000&amp;lt1=_blank&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr\"></iframe>\r\n\r\n物理的にも軽いし、起動も早い、サイトメンテナンスもできる、Youtubeも観れる、Android アプリ使えるすごくいいです。\r\n\r\n## Amazon で安かった\r\n最近、事情でアマプラ会員になりました。\r\nこのChromebook はふいに私のAndroid のGoogle のおすすめに上がってきたので、購買意欲をそそられてしまいました。\r\n\r\nもともと子供がしまじろう見たり、電車の動画をたくさん見ます。あまり見せすぎたくはないですが、何かと子供が一人で遊んでもらえるので便利だと思いました。また私も読書するのでタブレットみたいのが欲しいと思っていました。\r\n\r\n我が家の財務大臣（妻）に相談しました。\r\n稟議申請！！以外にも購入許可。やった～\r\n\r\n## 到着\r\nさすがアマプラ会員。翌日に到着・・・\r\n置き配はしないでと頼んだと思ったのですが遅かったのか、玄関にポツリ\r\n\r\n## 開封！\r\n早速開封しました。\r\n\r\n# OSが古く、更新されない問題発生→解決\r\n家のWi-Fi につないで、さっそく設定してみたところ、あっさり初期設定できました。\r\nただ、新しい機能を使いたかったので設定画面から更新をかけたところ、\r\n\r\nバージョン *87.xxxx* との表示。確かもっと新しいバージョンのはず。。\r\n\r\n更新をかけても、バージョンアップされず、なぜか「最新のバージョンになっています」との表示が！！\r\n\r\nなぜ～\r\n\r\n## 調べて過去記事発見\r\nたしか英語の記事でしたが、この機種で、正常にバージョンアップされないという状況を発見。\r\n\r\n結局リカバリーツールをインストールして、4GB のUSBメモリにリカバリーイメージを保存、Chromebook に挿入してUSBから起動。\r\n最新のバージョンでリカバリーされて、その後は問題なくバージョンアップされたので、このまま使っています。\r\n\r\nChromebook を買ってバージョンアップされないなという人がいたら、あきらめてこの方法でリカバリーするしかないです。\r\n<font color=\"red\"> **もちろんデータは消えるので** </font> やる前には <mark>事前にバックアップ</mark> をお願いします！！", "created_at": "2021-09-26", "updated_at": "2022-02-03", "category": 13, "thumnail": "post/computer_laptop_angle2.png", "is_publish": true, "writer": 2, "abstract": "欲しかったんですよ〜Chromebook。ついに買いました。 Acer 11.6型 Spin 311 MediaTek M8183C（4GBメモリ 32GB eMMC）。レビューしてみます。", "tag": [18, 19]}}, {"model": "cms.post", "pk": 12, "fields": {"title": "サイト構築の裏話(②OSインストール~初期設定）", "body": "[TOC]\r\n# 目的\r\n今回は、VPS 契約後の初期設定についてです。\r\nVPS契約後に必ずやることでしょう。\r\n\r\n!!! note \"ご注意\"\r\n    本記述は CentOS 8 Stream を基にした記事ですので、OS が異なる方は注意を。また、記事の正しさについて細かい部分で誤りがある可能性があるため注意してください。\r\n\r\n## ゴール\r\n*[SSH ]: Secure SHell\r\n今回は、OS インストール後の初期設定、自宅からVPS のサーバまで公開鍵認証方式を使って安全に[^1]SSH 接続するところまで記述します。これをすることで、インターネットが繋がっていればどこでも安全に自分が管理するサーバへログオンすることができます。\r\n\r\n[^1]:ssh 接続をする認証方式を <font color=\"DeepPink\">**パスワード認証方式**</font> から <font color=\"LightSeaGreen\">**公開鍵認証方式**</font> を使って認証する方式に切り替えます。公開鍵認証方式とは、鍵を持っている人(パソコン)からのみ、ログインを許可する。というものです。パスワード認証ではパスワードが（総当り攻撃などで）第三者に不正に破られるリスクがありますが、公開鍵認証方式では **鍵が盗まれない限り** 破られることはありません。\r\n\r\n# 手順\r\n\r\n## VPS のコントロールパネルを起動\r\nインストール手順は通常のCentOS 8 Stream を検索していただくと記事がたくさんあるためここでは割愛します。\r\n **最小限のインストール** 、時刻と日付の地域は日本(東京)として設定します。\r\nまた、ルートユーザのパスワードは <mark>強固なもので</mark> 設定しましょう。\r\n\r\n## ユーザの作成\r\nユーザを作成します。\r\n```console\r\n# useradd ken\r\n```\r\nユーザパスワードを設定します。\r\n```console\r\n# passwd ken\r\n****************** (任意パスワード)\r\n******************\r\n```\r\n\r\nこのパスワードは、ユーザの（パスワード認証方式の）ログオンパスワードです。普段は利用しませんがパスワードなしでは気持ちが悪いので設定します。sshの公開鍵認証方式のパスワードではないです。\r\n鍵認証用のパスワードは別途作成します。\r\n\r\n## SELINUX の停止\r\n*[SELINUX]: Security-Enhanced-Linux\r\nSELINUXとは、 **S**ecurity-**E**nhanced-**Linux** のことで、Linux をよりセキュリティ的に堅牢にすることを目的としたカーネルの制御機能のことらしいです。デフォルトで有効になっていますが、これを有効にしたままでは、Webサイトがうまく動かないことが多く、無効化にしました。\r\n有効にした上で必要な権限を設定、万が一のことに備えるのが理想なのですが、仕様が難解でなかなかうまく行かなかったため私のような個人運営するサイトでは無効化して問題ないと判断し無効化することにしました。\r\n\r\n機会があれば勉強して有効化したいものです。\r\n\r\n### SELINUX を永続的に無効化する\r\n無効化するには、設定ファイルを編集し、再起動します。設定ファイルの以下 enforcing となっている部分を disabled に変更します。\r\n\r\n!!! note \"情報\"\r\n    vim の使い方については、他のサイトを御覧ください。\r\n\r\n```console\r\n# vim /etc/selinux/config\r\nSELINUX=disabled #もともとは \"enforcing\" \r\n# reboot\r\n```\r\n※vim コマンドが入っていない方は、インストールしましょう。\r\n```console\r\n# dnf install vim\r\n```\r\n\r\n再起動後、 SELINUX が無効化されたことを確認します。\r\n```console\r\n# getenforce\r\ndisabled\r\n```\r\nとなっていればOKです。\r\n\r\n## サーバのSSH の設定\r\n次にssh の設定をします。\r\n\r\n###root ユーザのログイン無効化\r\n\r\n### ssh の有効化\r\n\r\n### ssh 接続", "created_at": "2021-10-10", "updated_at": "2021-11-21", "category": 12, "thumnail": "", "is_publish": false, "writer": 2, "abstract": "VPS の契約後のCentOS インストールから初期設定(ssh設定)まで", "tag": [7, 13]}}, {"model": "cms.post", "pk": 13, "fields": {"title": "サイト構築の裏話（③Nginxの設定）", "body": "[TOC]\r\n# 見出し1\r\n本文\r\n## 見出し2\r\n```nginx\r\ngeo $access_from {\r\n    default external;\r\n    ***.***.***.*** internal; # 接続元（自宅などのグローバルIP）\r\n}\r\n\r\n\r\nserver {\r\n    listen 80;\r\n    server_name *******.******; #\r\n    return 301 https://$host$request_uri;\r\n\r\n}\r\n\r\nserver {\r\n    listen 443 http2;\r\n    ssl on;\r\n    server_name *******.******; #\r\n    access_log    /***/***/***/www/access.log;\r\n    error_log     /***/***/***/www/error.log;\r\n\r\n    ssl_certificate /etc/letsencrypt/live/*******.******/fullchain.pem;\r\n    ssl_certificate_key /etc/letsencrypt/live/*******.******/privkey.pem;\r\n\r\n    error_page 503 @maintenance;\r\n\r\n    set $maintenance false;\r\n\r\n    gzip on;\r\n    gzip_types image/png image/gif image/jpeg text/javascript text/css;\r\n    gzip_min_length 1000;\r\n    gzip_proxied any;\r\n    gunzip on;\r\n    client_max_body_size 20m;\r\n\r\n    if (-e /***/***/***/www/maintenance){\r\n        set $maintenance true;\r\n    }\r\n\r\n    if ($access_from !~ external){\r\n        set $maintenance false;\r\n    }\r\n\r\n    if ($maintenance = true){\r\n        return 503;\r\n    }\r\n\r\n    location @maintenance {\r\n        root /***/***/***/cms/templates;\r\n        expires 0;\r\n        rewrite ^(.*)$ /maintenance.html break;\r\n    }\r\n\r\n    location / {\r\n        include uwsgi_params;\r\n        uwsgi_pass  unix:/***/***/***/www/portal.sock;\r\n    }\r\n\r\n    location /ads.txt {\r\n        alias  /***/***/***/static/ads.txt;\r\n    }\r\n\r\n    location /static/ {\r\n        root  /***/***/***/site;\r\n        expires 30d;\r\n    }\r\n\r\n    location /uploads/ {\r\n        alias  /***/***/***/uploads/;\r\n        expires 30d;\r\n    }\r\n\r\n    location /story-contents {\r\n        alias  /***/***/***/story/contents/build/html;\r\n        index index.html;\r\n        expires 30d;\r\n    }\r\n}\r\n```", "created_at": "2021-11-14", "updated_at": "2021-11-14", "category": 3, "thumnail": "", "is_publish": false, "writer": 2, "abstract": "", "tag": [1, 2, 13]}}, {"model": "cms.post", "pk": 14, "fields": {"title": "ディズニーランド旅行", "body": "[TOC]\r\n# 見出し1\r\n本文\r\n## 見出し2\r\n\r\n**強調**\r\n*斜字*", "created_at": "2022-01-05", "updated_at": "2022-01-05", "category": 5, "thumnail": "", "is_publish": false, "writer": 3, "abstract": "2021/12/19-2021/12/20に、1泊2日でディズニーランドへ！", "tag": [16]}}]